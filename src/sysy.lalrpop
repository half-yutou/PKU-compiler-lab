// lalrpop 里的约定
grammar;
use pku_compiler::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},

//  // 双字符运算符必须在单字符运算符之前匹配
//  "<=" => LEQ,
//  ">=" => GEQ,
//  "==" => EQ,
//  "!=" => NEQ,
//  "&&" => LAND,
//  "||" => LOR,

  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block { block_item_list: items };

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(decl),
    <stmt: Stmt> => BlockItem::Stmt(stmt),
}

Decl: Decl = <const_decl: ConstDecl> => Decl::Const(const_decl);

ConstDecl: ConstDecl = {
    "const" <b_type: BType> <h: ConstDef> <t: ("," <ConstDef>)*> ";" => {
        let mut const_def_list = vec![h];
        for item in t {
            const_def_list.push(item);
        }
        ConstDecl { b_type, const_def_list }
    }
};

BType: String = "int" => "int".to_string();

ConstDef: ConstDef = <id:Ident> "=" <const_init_val:ConstInitVal> => ConstDef { ident: id, const_init_val };

ConstInitVal: ConstInitVal = <exp:ConstExp> => ConstInitVal { const_exp: exp };

ConstExp: ConstExp = <exp:AddExp> => ConstExp { add_exp: exp };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt::Return(exp);

Exp: Exp = <lor_exp: LOrExp> => Exp::LOr(Box::new(lor_exp));

LOrExp: LOrExp = {
    <land_exp: LAndExp> => LOrExp::LAnd(Box::new(land_exp)),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOr(Box::new(lor_exp), Box::new(land_exp)),
}

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::Eq(Box::new(eq_exp)),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAnd(Box::new(land_exp), Box::new(eq_exp)),
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::Rel(Box::new(rel_exp)),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Eq(Box::new(eq_exp), eq_op, Box::new(rel_exp)),
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::Add(Box::new(add_exp)),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Rel(Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::Mul(Box::new(mul_exp)),
    <add_exp: AddExp> <plus_sub_op: PlusSubOp> <mul_exp: MulExp> => AddExp::AddMul(Box::new(add_exp), plus_sub_op, Box::new(mul_exp)),
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::Unary(Box::new(unary_exp)),
    <mul_exp: MulExp> <mul_div_op: MulDivOp> <unary_exp: UnaryExp> => MulExp::MulDiv(Box::new(mul_exp), mul_div_op, Box::new(unary_exp)),
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::Primary(primary_exp),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Unary(unary_op, Box::new(unary_exp)),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
}

PlusSubOp: PlusSubOp = {
    "+" => PlusSubOp::Plus,
    "-" => PlusSubOp::Minus,
}

MulDivOp: MulDivOp = {
    "*" => MulDivOp::Mul,
    "/" => MulDivOp::Div,
    "%" => MulDivOp::Mod,
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
}

PrimaryExp: PrimaryExp = {
    <num: Number> => PrimaryExp::Number(num),
    "(" <exp: Exp> ")" => PrimaryExp::Paren(Box::new(exp)),
    <lval: LVal> => PrimaryExp::LVal(lval),
}

LVal: String = <id:Ident> => id;

Number: i32 = <num: IntConst> => <>;


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

