// lalrpop 里的约定
grammar;
use pku_compiler::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},

  // 关键字
  "if" => "if",
  "else" => "else",
  "void" => "void",
  "const" => "const",

  // 剩下的情况采用默认方式处理
  _
}

// 修改CompUnit以支持多个函数定义和全局声明
pub CompUnit: CompUnit = {
    <items: CompUnitItem+> => CompUnit { items }
};

// 重构CompUnitItem规则，直接处理歧义
CompUnitItem: CompUnitItem = {
    // void 函数定义（无歧义）
    "void" <id: Ident> "(" <params: FuncFParams?> ")" <block: Block> => {
        CompUnitItem::FuncDef(FuncDef { 
            func_type: FuncType::Void, 
            id, 
            params, 
            block 
        })
    },
    
    // int 函数定义（通过括号区分）
    "int" <id: Ident> "(" <params: FuncFParams?> ")" <block: Block> => {
        CompUnitItem::FuncDef(FuncDef { 
            func_type: FuncType::Int, 
            id, 
            params, 
            block 
        })
    },
    
    // int 全局变量声明（通过等号区分）
    "int" <h: GlobalVarDef> <t: ("," <GlobalVarDef>)*> ";" => {
        let mut var_def_list = vec![h];  // 修改变量名
        for item in t {
            var_def_list.push(item);
        }
        CompUnitItem::GlobalDecl(GlobalDecl::Var(GlobalVarDecl { 
            b_type: "int".to_string(), 
            var_def_list  // 修改字段名，与AST定义保持一致
        }))
    },
    
    // 常量声明
    "const" "int" <h: ConstDef> <t: ("," <ConstDef>)*> ";" => {
        let mut const_def_list = vec![h];
        for item in t {
            const_def_list.push(item);
        }
        CompUnitItem::GlobalDecl(GlobalDecl::Const(ConstDecl { 
            b_type: "int".to_string(), 
            const_def_list 
        }))
    },
};

// 全局变量定义规则（初始值可选）
GlobalVarDef: GlobalVarDef = {
    <id: Ident> "=" <init_val: InitVal> => GlobalVarDef { ident: id, init_val: Some(init_val) },
    <id: Ident> => GlobalVarDef { ident: id, init_val: None },
};

// 函数形参列表规则
FuncFParams: FuncFParams = {
    <h: FuncFParam> <t: ("," <FuncFParam>)*> => {
        let mut params = vec![h];
        for param in t {
            params.push(param);
        }
        FuncFParams { params }
    }
};

// 函数形参规则
FuncFParam: FuncFParam = {
    "int" <ident: Ident> => FuncFParam { 
        b_type: "int".to_string(), 
        ident 
    }
};

// 函数实参列表规则
FuncRParams: FuncRParams = {
    <h: Exp> <t: ("," <Exp>)*> => {
        let mut params = vec![h];
        for param in t {
            params.push(param);
        }
        FuncRParams { params }
    }
};

Block: Block = "{" <items: BlockItem*> "}" => Block { block_item_list: items };

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(decl),
    <stmt: Stmt> => BlockItem::Stmt(stmt),
}

Decl: Decl = {
    <const_decl: ConstDecl> => Decl::Const(const_decl),
    <var_decl: VarDecl> => Decl::Var(var_decl),
}

// 局部变量声明（可选初始化）
VarDecl: VarDecl =  {
    "int" <h: VarDef> <t: ("," <VarDef>)*> ";" => {
        let mut var_def_list = vec![h];
        for item in t {
            var_def_list.push(item);
        }
        VarDecl { 
            b_type: "int".to_string(), 
            var_def_list 
        }
    }
}

// 局部变量定义（可选初始化）
VarDef: VarDef = {
    <id:Ident> => VarDef { ident: id, init_val: None },
    <id:Ident> "=" <init_val: InitVal> => VarDef { ident: id, init_val: Some(init_val) },
}

InitVal: InitVal = <exp:Exp> => InitVal { exp };

// 常量声明（局部）
ConstDecl: ConstDecl = {
    "const" "int" <h: ConstDef> <t: ("," <ConstDef>)*> ";" => {
        let mut const_def_list = vec![h];
        for item in t {
            const_def_list.push(item);
        }
        ConstDecl { 
            b_type: "int".to_string(), 
            const_def_list 
        }
    }
}

ConstDef: ConstDef = <id:Ident> "=" <const_init_val:ConstInitVal> => ConstDef { ident: id, const_init_val };

ConstInitVal: ConstInitVal = <exp:ConstExp> => ConstInitVal { const_exp: exp };

ConstExp: ConstExp = <exp: LOrExp> => ConstExp { lor_exp: exp };

Stmt: Stmt = {
    <matched: MatchedStmt> => matched,
    <open: OpenStmt> => open,
};

// MatchedStmt: 完全匹配的语句（每个if都有else）
MatchedStmt: Stmt = {
    // 基本语句
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, exp),
    <exp: Exp?> ";" => Stmt::Exp(exp),
    <block: Block> => Stmt::Block(block),
    "return" <exp: Exp?> ";" => Stmt::Return(exp),
    
    // 完整的if-else语句（then和else都必须是MatchedStmt）
    "if" "(" <cond: Exp> ")" <then_stmt: MatchedStmt> "else" <else_stmt: MatchedStmt> => {
        Stmt::If(cond, Box::new(then_stmt), Some(Box::new(else_stmt)))
    },

    "while" "(" <cond: Exp> ")" <stmt: MatchedStmt> => {
        Stmt::While(cond, Box::new(stmt))
    },
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
};

// OpenStmt: 开放的语句
OpenStmt: Stmt = {
    // 不完整的if语句（没有else）
    "if" "(" <cond: Exp> ")" <stmt: Stmt> => {
        Stmt::If(cond, Box::new(stmt), None)
    },

    "if" "(" <cond: Exp> ")" <then: MatchedStmt>
    "else" <else_then: OpenStmt> => {
      Stmt::If(cond, Box::new(then), Some(Box::new(else_then)))
    },

    "while" "(" <cond: Exp> ")" <body: OpenStmt> => {
      Stmt::While(cond, Box::new(body))
    },
}

Exp: Exp = <lor_exp: LOrExp> => Exp::LOr(Box::new(lor_exp));

LOrExp: LOrExp = {
    <land_exp: LAndExp> => LOrExp::LAnd(Box::new(land_exp)),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOr(Box::new(lor_exp), Box::new(land_exp)),
}

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::Eq(Box::new(eq_exp)),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAnd(Box::new(land_exp), Box::new(eq_exp)),
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::Rel(Box::new(rel_exp)),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Eq(Box::new(eq_exp), eq_op, Box::new(rel_exp)),
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::Add(Box::new(add_exp)),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Rel(Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::Mul(Box::new(mul_exp)),
    <add_exp: AddExp> <plus_sub_op: PlusSubOp> <mul_exp: MulExp> => AddExp::AddMul(Box::new(add_exp), plus_sub_op, Box::new(mul_exp)),
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::Unary(Box::new(unary_exp)),
    <mul_exp: MulExp> <mul_div_op: MulDivOp> <unary_exp: UnaryExp> => MulExp::MulDiv(Box::new(mul_exp), mul_div_op, Box::new(unary_exp)),
}

// 修改UnaryExp以支持函数调用
UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::Primary(primary_exp),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Unary(unary_op, Box::new(unary_exp)),
    <id: Ident> "(" <params: FuncRParams?> ")" => UnaryExp::FuncCall(id, params),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
}

PlusSubOp: PlusSubOp = {
    "+" => PlusSubOp::Plus,
    "-" => PlusSubOp::Minus,
}

MulDivOp: MulDivOp = {
    "*" => MulDivOp::Mul,
    "/" => MulDivOp::Div,
    "%" => MulDivOp::Mod,
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
}

PrimaryExp: PrimaryExp = {
    <num: Number> => PrimaryExp::Number(num),
    "(" <exp: Exp> ")" => PrimaryExp::Paren(Box::new(exp)),
    <lval: LVal> => PrimaryExp::LVal(lval),
}

LVal: LVal = <id: Ident> => LVal { ident: id };

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

