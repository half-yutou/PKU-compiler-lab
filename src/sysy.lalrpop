// lalrpop 里的约定
grammar;
use pku_compiler::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Exp = <add_exp: AddExp> => Exp::AddExp(add_exp);

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::Mul(Box::new(mul_exp)),
    <add_exp: AddExp> <plus_sub_op: PlusSubOp> <mul_exp: MulExp> => AddExp::AddMul(Box::new(add_exp), plus_sub_op, Box::new(mul_exp)),
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::Unary(Box::new(unary_exp)),
    <mul_exp: MulExp> <mul_div_op: MulDivOp> <unary_exp: UnaryExp> => MulExp::MulDiv(Box::new(mul_exp), mul_div_op, Box::new(unary_exp)),
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::Primary(primary_exp),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Unary(unary_op, Box::new(unary_exp)),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
}

PlusSubOp: PlusSubOp = {
    "+" => PlusSubOp::Plus,
    "-" => PlusSubOp::Minus,
}

MulDivOp: MulDivOp = {
    "*" => MulDivOp::Mul,
    "/" => MulDivOp::Div,
}

PrimaryExp: PrimaryExp = {
    <num: Number> => PrimaryExp::Number(num),
    "(" <exp: Exp> ")" => PrimaryExp::Paren(Box::new(exp)),
}


Number: i32 = <num: IntConst> => <>;


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

